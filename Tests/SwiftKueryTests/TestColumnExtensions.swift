/**
* Copyright IBM Corporation 2016
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

import XCTest

@testable import SwiftKuery

// This test was generated by Scripts/testColumnExtensions.sh.
class TestColumnExtensions: XCTestCase {

    static var allTests: [(String, (TestColumnExtensions) -> () throws -> Void)] {
        return [
            ("testFunctions", testFunctions),
        ]
    }

    class MyTable: Table {
        let a = Column("a")
        let b = Column("b")

        let tableName = "table"
    }

    func testFunctions() {
        let t = MyTable()
        let connection = createConnection()
        var s = Select(from: t)
        var kuery = ""
        var queryWhere = ""
        var queryHaving = ""

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notLike("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.like("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notLike("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.like("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notLike(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.like(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notLike(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.like(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notLike("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).like("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(first(t.a).notLike("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING FIRST(table.a) NOT LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING FIRST(table.a) NOT LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(first(t.a).like("%kuery%"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING FIRST(table.a) LIKE '%kuery%' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING FIRST(table.a) LIKE '%kuery%'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notLike(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).like(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(first(t.a).notLike(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING FIRST(table.a) NOT LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING FIRST(table.a) NOT LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(first(t.a).like(Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING FIRST(table.a) LIKE ?1 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING FIRST(table.a) LIKE ?1"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.between(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notBetween(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.in(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notIn(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.between(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notBetween(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.in(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notIn(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.between("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notBetween("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.in("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notIn("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.between("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notBetween("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.in("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notIn("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.between(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notBetween(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.in(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notIn(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.between(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notBetween(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.in(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notIn(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.between(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notBetween(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.in(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notIn(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.between(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notBetween(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.in(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notIn(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.between(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notBetween(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.in(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a.notIn(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a NOT IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.between(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notBetween(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.in(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a.notIn(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a NOT IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).between(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notBetween(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).in(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notIn(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).between(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notBetween(true, and: false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT BETWEEN true AND false GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT BETWEEN true AND false"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).in(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notIn(true, false))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT IN (true, false) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT IN (true, false)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).between("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notBetween("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).in("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notIn("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).between("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notBetween("apple", and: "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT BETWEEN 'apple' AND 'peach' GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT BETWEEN 'apple' AND 'peach'"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).in("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notIn("apple", "peach"))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT IN ('apple', 'peach') GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT IN ('apple', 'peach')"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).between(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notBetween(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).in(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notIn(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).between(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notBetween(3, and: 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT BETWEEN 3 AND 6 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT BETWEEN 3 AND 6"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).in(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notIn(3, 6))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT IN (3, 6) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT IN (3, 6)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).between(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notBetween(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).in(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notIn(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).between(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notBetween(2.71828, and: 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT BETWEEN 2.71828 AND 3.14159 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT BETWEEN 2.71828 AND 3.14159"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).in(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notIn(2.71828, 3.14159))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT IN (2.71828, 3.14159) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT IN (2.71828, 3.14159)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).between(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notBetween(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).in(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a).notIn(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) NOT IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) NOT IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).between(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notBetween(Parameter(), and: Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT BETWEEN ?1 AND ?2 GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT BETWEEN ?1 AND ?2"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).in(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.a).notIn(Parameter(), Parameter()))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING LAST(table.a) NOT IN (?1, ?2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.a) NOT IN (?1, ?2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
  }
}
